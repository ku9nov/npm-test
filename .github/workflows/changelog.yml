name: "Update Changelog on Release PR"

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Debug event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Comment body: ${{ github.event.comment.body }}"
          echo "Issue has PR: ${{ github.event.issue.pull_request != null }}"
          echo "Author association: ${{ github.event.comment.author_association }}"
          echo "Contains changelog: ${{ contains(github.event.comment.body, '/changelog') }}"
          
          # Get PR information via API
          if [ "${{ github.event.issue.pull_request != null }}" = "true" ]; then
            PR_NUMBER="${{ github.event.issue.number }}"
            PR_INFO=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER)
            echo "PR title: $(echo "$PR_INFO" | jq -r '.title')"
            echo "PR base ref: $(echo "$PR_INFO" | jq -r '.base.ref')"
            echo "PR head ref: $(echo "$PR_INFO" | jq -r '.head.ref')"
            echo "PR state: $(echo "$PR_INFO" | jq -r '.state')"
          else
            echo "No PR associated with this issue"
          fi
  update-changelog:
    if: |
      github.event.issue.pull_request != null &&
      contains(github.event.comment.body, '/changelog') &&
      (
        github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'
      )
    runs-on: ubuntu-latest

    steps:
      - name: Get PR information
        id: pr_info
        run: |
          PR_NUMBER="${{ github.event.issue.number }}"
          PR_INFO=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER)
          
          # Check if PR exists and is open
          PR_STATE=$(echo "$PR_INFO" | jq -r '.state')
          if [ "$PR_STATE" != "open" ]; then
            echo "‚ùå PR is not open (state: $PR_STATE)"
            exit 1
          fi
          
          echo "pr_title=$(echo "$PR_INFO" | jq -r '.title')" >> $GITHUB_OUTPUT
          echo "pr_base_ref=$(echo "$PR_INFO" | jq -r '.base.ref')" >> $GITHUB_OUTPUT
          echo "pr_head_ref=$(echo "$PR_INFO" | jq -r '.head.ref')" >> $GITHUB_OUTPUT
          echo "pr_state=$PR_STATE" >> $GITHUB_OUTPUT
          
          echo "‚úÖ PR found: $(echo "$PR_INFO" | jq -r '.title')"
          echo "   Base ref: $(echo "$PR_INFO" | jq -r '.base.ref')"
          echo "   Head ref: $(echo "$PR_INFO" | jq -r '.head.ref')"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.pr_info.outputs.pr_head_ref }}

      - name: Extract version from PR comment
        id: version
        run: |
            comment="${{ github.event.comment.body }}"
            version=$(echo "$comment" | grep -oP '/changelog\s+\K[0-9]+\.[0-9]+\.[0-9]+')
            echo "Comment: $comment"
            echo "Extracted version: $version"
            if [ -z "$version" ]; then
              echo "‚ùå Version not found in PR title"
              exit 1
            fi
            echo "version=$version" >> $GITHUB_OUTPUT
        

      - name: Setup git-chglog
        run: |
          CHGLOG_VERSION="0.15.4"
          curl -sSL "https://github.com/git-chglog/git-chglog/releases/download/v${CHGLOG_VERSION}/git-chglog_${CHGLOG_VERSION}_linux_amd64.tar.gz" | tar -xz
          chmod +x git-chglog

      - name: Generate CHANGELOG.md
        id: generate
        run: |
          ./git-chglog --next-tag ${{ steps.version.outputs.version }} -o CHANGELOG.md
          if git diff --quiet CHANGELOG.md; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        run: rm git-chglog
        if: always()

      - name: Create Pull Request
        if: steps.generate.outputs.changes == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GH_PAT }}
          commit-message: "docs: update CHANGELOG.md"
          title: "üìù Update Changelog"
          body: |
            This PR updates the CHANGELOG.md.
            - Generated using git-chglog
            - Triggered by: release PR
            - Auto-merge enabled
          branch: update-changelog-${{ github.run_id }}
          base: ${{ steps.pr_info.outputs.pr_base_ref }}
          delete-branch: true
          labels: documentation, automated-pr

      - name: Enable Auto-merge
        if: steps.generate.outputs.changes == 'true'
        run: |
          gh pr merge --auto --squash "${{ steps.create-pr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Delete changelog branch after merge
        if: steps.generate.outputs.changes == 'true'
        run: |
            branch="update-changelog-${{ github.run_id }}"
  
            sleep 5
  
            pr_state=$(gh pr view "$branch" --json state --jq '.state')

            if [ "$pr_state" = "MERGED" ]; then
              echo "‚úÖ PR merged, deleting branch '$branch'"
              git push origin --delete "$branch"
            else
              echo "‚ö†Ô∏è PR state is '$pr_state'. Skipping branch deletion."
            fi
        env:
            GH_TOKEN: ${{ secrets.GH_PAT }}
